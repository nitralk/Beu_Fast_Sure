name: Test Discord Integration

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - embed
        - rate_limit
        - full_monitor

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Discord test
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TEST_TYPE: ${{ github.event.inputs.test_type }}
        GITHUB_ACTIONS: 'true'
      run: |
        python -c "
        import asyncio
        import aiohttp
        import json
        import os
        from datetime import datetime
        
        async def test_discord():
            webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
            test_type = os.getenv('TEST_TYPE', 'basic')
            
            if not webhook_url:
                print('‚ùå No Discord webhook URL configured')
                return
            
            print(f'üß™ Running {test_type} test...')
            
            if test_type == 'basic':
                payload = {
                    'content': '‚úÖ **Test Message**: Discord webhook is working!',
                    'username': 'BEUP Test Bot'
                }
            elif test_type == 'embed':
                payload = {
                    'embeds': [{
                        'title': 'üß™ Discord Embed Test',
                        'description': 'This is a test embed to verify Discord integration',
                        'color': 0x00ff00,
                        'timestamp': datetime.utcnow().isoformat(),
                        'fields': [
                            {
                                'name': 'üîß Test Type',
                                'value': 'Embed Test',
                                'inline': True
                            },
                            {
                                'name': '‚è∞ Test Time',
                                'value': datetime.now().strftime('%H:%M:%S UTC'),
                                'inline': True
                            }
                        ],
                        'footer': {
                            'text': 'GitHub Actions Test'
                        }
                    }],
                    'username': 'BEUP Test Bot'
                }
            elif test_type == 'rate_limit':
                # Test rate limiting with multiple messages
                for i in range(3):
                    payload = {
                        'content': f'üì® Rate limit test message {i+1}/3',
                        'username': 'BEUP Test Bot'
                    }
                    async with aiohttp.ClientSession() as session:
                        async with session.post(webhook_url, json=payload) as response:
                            print(f'Message {i+1} status: {response.status}')
                            rate_limit_remaining = response.headers.get('X-RateLimit-Remaining', 'unknown')
                            print(f'Rate limit remaining: {rate_limit_remaining}')
                    await asyncio.sleep(1)
                return
            elif test_type == 'full_monitor':
                # Import and run the monitor
                from discord_monitor import DiscordMonitor
                monitor = DiscordMonitor()
                await monitor.monitor_once()
                return
            
            async with aiohttp.ClientSession() as session:
                async with session.post(webhook_url, json=payload) as response:
                    if response.status in [200, 204]:
                        print('‚úÖ Discord webhook test successful!')
                        print(f'Response status: {response.status}')
                    else:
                        print(f'‚ùå Discord webhook test failed with status: {response.status}')
                        error_text = await response.text()
                        print(f'Error: {error_text}')
        
        asyncio.run(test_discord())
        "
